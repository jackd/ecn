import ecn.layers.conv
import ecn.problems.utils
import kblocks.extras.cache
import kblocks.extras.cache.tfrecords
import kblocks.keras.optimizers
import kblocks.path

trainable = @ecn.utils.multi_graph_trainable()
ecn.utils.multi_graph_trainable.build_fn = %build_fn
ecn.utils.multi_graph_trainable.base_source = %base_source
ecn.utils.multi_graph_trainable.batch_size = %batch_size
ecn.utils.multi_graph_trainable.compiler = %compiler

ecn.utils.multi_graph_trainable.model_dir = %model_dir

model_dir = @kb.path.model_dir()
kb.path.model_dir.root_dir = '~/ecn'
kb.path.model_dir.problem_id = %problem_id
kb.path.model_dir.model_id = %model_id
kb.path.model_dir.variant_id = %variant_id
kb.path.model_dir.run = %run

ecn.layers.SpatioTemporalEventConv.use_csr = %use_csr
ecn.layers.TemporalEventConv.use_csr = %use_csr

use_csr = False

# HACK
# kb.framework.BasePipeline.clear_cache = %clear_cache
# kb.framework.BasePipeline.cache_managers = @kb.cache.cache_managers()
# kb.framework.BasePipeline.shuffle_buffer = %shuffle_buffer
kb.framework.PipelinedSource.clear_cache = %clear_cache
kb.framework.PipelinedSource.cache_managers = @kb.cache.cache_managers()
kb.framework.PipelinedSource.shuffle_buffer = %shuffle_buffer
kb.cache.BaseCacheManager.preprocess = True
kb.cache.cache_managers.root_dir = @cache/kb.path.model_dir()
kb.cache.cache_managers.train_impl = @TFRecordsCacheManager
kb.cache.cache_managers.validation_impl = @TFRecordsCacheManager
kb.cache.TFRecordsCacheManager.compression = 'GZIP'
cache/kb.path.model_dir.run = None
cache/kb.path.model_dir.variant_id = 'cache'


model_id = 'default_model'
variant_id = 'default_variant'
run = 0

compiler = @ecn.utils.compile_stream_classifier
ecn.utils.compile_stream_classifier.optimizer = @tf.keras.optimizers.Adam()
ecn.utils.compile_stream_classifier.target = %target
target = 'final'

# TfConfig.jit = True
clear_cache = False

bucket_sizes = False

# to define:
# build_fn =
# base_source =
# batch_size =
# problem_id =
